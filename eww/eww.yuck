;; ** Variables ***********************************************************************

;; Time vars
(defpoll hour :interval "30s"
"bash -c 'date +%H'")
(defpoll min :interval "30s"
"bash -c 'date +%M'")
(defpoll month :interval "30s"
"bash -c 'date +%b'")
(defpoll day :interval "30s"
"date '+%d'")
(defpoll year :interval "30s"
"bash -c 'date +%Y'")

;; Weather vars
(defpoll WEATHER :interval "5m" `scripts/weather.sh`)

;; Music vars
(defpoll SONG :interval "1s" `scripts/spotify/spotify-song.sh`)
(defpoll PLAYING :interval "1s" "scripts/spotify/spotify-playing-get.sh")
(defpoll MUTE :interval "1s" "scripts/mute.sh --status")
(defpoll COVER :interval "1s" "scripts/spotify/spotify-artwork.sh")
;; Battery vars
(defpoll BATICON :interval "1s" `scripts/battery.sh --icon`)
(defpoll BATPERC :interval "10s" `scripts/battery.sh --perc`)

;; Screen
(defpoll BRIGHTNESS :interval "1s" `scripts/brightness.sh level`)
(defpoll BRIGHTICON :interval "1s" `scripts/brightness.sh icon`)

;; Audio vars
(defpoll VOLICON :interval "1s" `scripts/volume --icon`)
(defpoll VOLUME :interval "1s" `scripts/volume --get`)
(defpoll MICROPHONE :interval "1s" "scripts/mic.sh")
(defpoll MICICON :interval "1s" "scripts/micicon.sh")

;; Network
(defpoll WIFIICON :interval "10s" `scripts/check-network --icon`)
(defpoll NETSTAT :interval "10s" `scripts/check-network --stat`)

;; User
(defvar IMAGE "images/profile.jpeg")
(defpoll USER :interval "10m" `whoami`)
(defvar OPTIONS "images/options.png")

;; ** Widgets *************************************************************************


;; weather
(defwidget weather []
  (box :class "dockbox"
    (box :class "clockbox" :orientation "v" :spacing 0 :valign "center" :halign "start" :space-evenly "false" :vexpand "false" :hexpand "false")
    (box :class "weatherbox" :orientation "h" :spacing 0 :valign "center" :halign "end" :space-evenly "false" :vexpand "false" :hexpand "false"
      (label :class "weathertemp" :text WEATHER))))

;; apps
(defwidget apps []
  (box :class "dockbox"
    (box :orientation "h" :spacing 15 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
      (button :style "background-image: url('images/icons/apps/vlc.png');" :class "appicon" :onclick "scripts/apps --vlc")
      (button :style "background-image: url('images/icons/apps/files.png');" :class "appicon" :onclick "scripts/apps --thunar")
      (button :style "background-image: url('images/icons/apps/discord.png');" :class "appicon" :onclick "scripts/apps --discord")
      (button :style "background-image: url('images/icons/apps/spotify.png');" :class "appicon" :onclick "scripts/apps --spotify")
      (button :style "background-image: url('images/icons/apps/visual-studio-code.png');" :class "appicon" :onclick "scripts/apps --vscode")
      (button :style "background-image: url('images/icons/apps/terminal.png');" :class "appicon" :onclick "scripts/apps --kitty")
      (button :style "background-image: url('images/icons/apps/firefox.png');" :class "appicon" :onclick "scripts/apps --firefox"))))



;(deflisten scroll [scroll script])


(defvar showtitle false)
(defvar scroll_width 30)
(defvar scrollval 0)
(defvar songlength 1)

(defwidget scrolltext [text]
  (scroll
    :hscroll true
    :active false
    :hexpand true
    :class "scrolltext"
    (transform
      :translate-x { ( songlength - ( 1.45 * songlength * 2 * (scrollval / 100.0))) + "px" }
      (box
        :space-evenly true
        :hexpand true
        :orientation "h"
        (label :halign "center" :class "playtext" :show-truncated false :truncate false :text text)
      )
    )
  )
)

;; spotify
(defwidget spotify []
  (box :class "dockboxcenter" :orientation "v"
    ;:vexpand "false"
    :hexpand "true"
    :space-evenly "false"
    (box :class "album_art" :valign "center" :vexpand "false" :hexpand "false" :style "background-image: url('${COVER}');")
    (scrolltext :text SONG)
    (box :class "musicbuttons"
      :orientation "v"
      :valign "center"
      :halign "center"
      (button :class "playbutton" :onclick "scripts/spotify/spotify-previous.sh" (label :class "playtext" :text "‚èÆ"))
      (button
        :class "playbutton"
        :onclick "scripts/spotify/spotify-pause.sh" (label :class "playtext" :text { PLAYING ? "‚è∏": "‚ñ∂"}))
      (button :class "playbutton" :onclick "scripts/spotify/spotify-next.sh" (label :class "playtext" :text "‚è≠"))
    )
    (vol_slider)
    (mute)
  )
)

(defwidget mute []
  (box
    :width 10
    :height 10
    (button
      :class "playbutton"
      :onclick "scripts/mute.sh" 
      (label :class {MUTE ? "textbase": "playtext"} :text "ùÑû")
    )
  )
)

(defwidget vol_slider []
  (box :width 10 :height 240 :halign "fill" :valign "fill"
       (scale :class "vol"
              :orientation "v"
              :min 0 :max 100
              :value VOLUME
              :flipped true
              :hexpand false
              :vexpand true
              :onchange "scripts/volume --set {}")))

;clock
(defwidget clock []
  (box :class "dockboxtop" :orientation "v"
    :hexpand "true"
    :space-evenly "false"
    (box :class "musicbuttons"
      :orientation "v"
      :valign "center"
      :halign "center"
      (box :class "playbutton"
        :orientation "v"
        :space-evenly "false"
        (label :truncate false :show-truncated false :class "playtext" :text hour)
        (label :truncate false :show-truncated false :class "playtext" :text min)
        (label :truncate false :show-truncated false :class "monthtext" :halign "center" :text month)
        (label :truncate false :show-truncated false :class "daytext" :halign "end" :text day)
      )
    )
    
  )
)


;; audio
(defwidget audio []
  (box :class "dockbox"
    (box :orientation "h" :spacing 16 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
      
      (button :onclick "scripts/volume --toggle"
        (box :orientation "h" :spacing 8 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
          (box :style "background-image: url('${VOLICON}');" :class "trayicon")
          (label :class "infotext" :halign "start" :text VOLUME)))
      (button :onclick "scripts/mictoggle.sh"
        (box :orientation "h" :spacing 8 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
          (box :style "background-image: url('${MICICON}');" :class "trayicon")
          (label :class "infotext" :halign "start" :text MICROPHONE))))))

;; screen
(defwidget screen []
  (box :class "dockbox"
    (box :orientation "h" :spacing 16 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
      (button :onclick "scripts/volume --toggle"
        (box :orientation "h" :spacing 8 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
          (box :style "background-image: url('${BRIGHTICON}');" :class "trayicon")
          (label :class "infotext" :halign "start" :text "${BRIGHTNESS}%")))
      (button :onclick "scripts/widget_apps --pow"
        (box :orientation "h" :spacing 8 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
          (box :style "background-image: url('${BATICON}');" :class "trayicon")
          (label :class "infotext" :halign "start" :text BATPERC))))))


;; profile
(defwidget profile []
  (box :class "dockbox"
    (box :orientation "h" :spacing 16 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
      (button :onclick "scripts/widget_apps --nm"
        (box :orientation "h" :spacing 8 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
          (box :style "background-image: url('${WIFIICON}');" :class "trayicon")
          (label :class "infotext" :halign "start" :text NETSTAT)))
      (button :onclick "sidedar/toggle_sidebar"
        (box :orientation "h" :spacing 8 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
          (box :style "background-image: url('${IMAGE}');" :class "face")
          (label :class "infotext" :halign "start" :text USER))))))



;; more
(defwidget more []
  (box :class "dockbox"
    (button :onclick "/home/shtam/.config/eww/dashboard/launch_bar.sh"
      (box :orientation "h" :spacing 16 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
        (box :style "background-image: url('${OPTIONS}');" :class "face")))))

;; ** Windows *************************************************************************

;; weather
(defwindow weather
  :monitor 0
  :geometry (geometry :x "5px"
    :y "5px"
    :width "300px"
    :height "45px"
  :anchor "top left")
  :stacking "fg"
  :reserve (struts :distance "80px" :side "top")
  :windowtype "dock"
  :wm-ignore false
  (weather))

;; spotify
(defwindow spotify
  :monitor 1
  :geometry (geometry :x "0px"
    :y "0px"
    :width "20px"
    :height "30px"
  :anchor "left center")
  :stacking "fg"
  :exclusive true
  :reserve (struts :distance "20px" :side "top")
  :windowtype "dock"
  :wm-ignore false
  (spotify))


;; clock
(defwindow clock
  :monitor 1
  :geometry (geometry :x "-45px"
    :y "0px"
    :width "20px"
    :height "30px"
  :anchor "left top")
  :stacking "bg"
  :exclusive false
  :reserve (struts :distance "20px" :side "top")
  :windowtype "dock"
  :wm-ignore true
  (clock))

;; apps
(defwindow apps
  :monitor 0
  :geometry (geometry :x "760px"
    :y "5px"
    :width "400px"
    :height "45px"
  :anchor "top left")
  :stacking "fg"
  :reserve (struts :distance "80px" :side "top")
  :windowtype "dock"
  :wm-ignore false
  (apps))







;;audio
(defwindow audio
  :monitor 0
  :geometry (geometry :x "1246px"
    :y "5px"
    :width "170px"
    :height "45px"
  :anchor "top left")
  :stacking "fg"
  :reserve (struts :distance "80px" :side "top")
  :windowtype "dock"
  :wm-ignore false
  (audio))



;;screen
(defwindow screen
  :monitor 0
  :geometry (geometry :x "1421px"
    :y "5px"
    :width "210px"
    :height "45px"
  :anchor "top left")
  :stacking "fg"
  :reserve (struts :distance "80px" :side "top")
  :windowtype "dock"
  :wm-ignore false
  (screen))

;; profile
(defwindow profile
  :monitor 0
  :geometry (geometry :x "1636px"
    :y "5px"
    :width "100px"
    :height "45px"
  :anchor "top left")
  :stacking "fg"
  :reserve (struts :distance "80px" :side "top")
  :windowtype "dock"
  :wm-ignore false
  (profile))

;;more
(defwindow more
  :monitor 0
  :geometry (geometry :x "1871px"
    :y "5px"
    :width "44px"
    :height "45px"
  :anchor "top left")
  :stacking "fg"
  :reserve (struts :distance "80px" :side "top")
  :windowtype "dock"
  :wm-ignore false
  (more))
